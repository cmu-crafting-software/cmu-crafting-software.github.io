{
  "0": {
    "doc": "Page Not Found",
    "title": "The page you’re looking doesn’t exist, sorry.",
    "content": " ",
    "url": "https://cmu-crafting-software.github.io/2024//404.html#the-page-youre-looking-doesnt-exist-sorry",
    "relUrl": "/404.html#the-page-youre-looking-doesnt-exist-sorry"
  },
  "1": {
    "doc": "Page Not Found",
    "title": "Page Not Found",
    "content": " ",
    "url": "https://cmu-crafting-software.github.io/2024//404.html",
    "relUrl": "/404.html"
  },
  "2": {
    "doc": "Announcements",
    "title": "Announcements",
    "content": "Announcements are stored in the _announcements directory and rendered according to the layout file, _layouts/announcement.html. ",
    "url": "https://cmu-crafting-software.github.io/2024//announcements/",
    "relUrl": "/announcements/"
  },
  "3": {
    "doc": "Assignments",
    "title": "Assignments",
    "content": " ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/",
    "relUrl": "/assignments/"
  },
  "4": {
    "doc": "Calendar",
    "title": "Calendar",
    "content": " ",
    "url": "https://cmu-crafting-software.github.io/2024//calendar/",
    "relUrl": "/calendar/"
  },
  "5": {
    "doc": "Calendar",
    "title": "Tentative schedule, topic may change",
    "content": "Jan 17 (Wed) Intro, VCS, Code Editing, and Running Jan 19 (Fri) Recitation git, GitHub, submitting, and HW1 Jan 22 (Mon) Command line Jan 24 (Wed) Python, Reading data Jan 26 (Fri) RecitationWeb APIs, REST Jan 29 (Mon) Paths Jan 31 (Wed) Data structures Feb 2 (Fri) RecitationPython collection manipulation, codepaces HW1 due Feb 5 (Mon) Testing Feb 7 (Wed) Debugging Feb 9 (Fri) RecitationClasses and sets HW2 due Feb 12 (Mon) Dataframes Feb 14 (Wed) Documentation + more Pandas Feb 16 (Fri) RecitationJoins and using the debugger HW3 due Feb 19 (Mon) Jupyter I Feb 21 (Wed) Jupyter II Feb 23 (Fri) Recitation Pandas aggregation and grouping Feb 26 (Mon) Unit Testing - more assertion types, checking for exceptions, mocking? Feb 28 (Wed) Collaboration (PR, issues, kanban) HW4 due Mar 1 (Fri) No Recitation Written project proposal due Mar 4 (Mon) Spring Break No class Mar 6 (Wed) Spring Break No class Mar 8 (Fri) Spring Break No recitaion Mar 11 (Mon) Property-based testing Mar 13 (Wed) Property-based testing (ctd.) Revised proposal due Mar 15 (Fri) Recitation Viz I HW5 due Mar 18 (Mon) Viz II Mar 20 (Wed) Viz III Mar 22 (Fri) Recitation Basic HTML/CSS and web vega-lite HW6 due Mar 25 (Mon) Web Dev 1 HTML/CSS Mar 27 (Wed) Web Dev 2 Javascript/Jekyll Mar 29 (Fri) Recitation code review exercise Apr 1 (Mon) Interactive Data Visualization Apr 3 (Wed) Interactive Data Visualization part 2 Apr 5 (Fri) Recitation Project work in recitation Apr 8 (Mon) Refactoring Apr 10 (Wed) TBD Apr 12 (Fri) Spring Carnival No recitation Apr 15 (Mon) Project checkpoint demonstration Apr 17 (Wed) Building a library Apr 19 (Fri) Recitation Project work in recitation Apr 22 (Mon) TBD Apr 24 (Wed) Final project presentations Apr 26 (Fri) Final project presentations ",
    "url": "https://cmu-crafting-software.github.io/2024//calendar/#tentative-schedule-topic-may-change",
    "relUrl": "/calendar/#tentative-schedule-topic-may-change"
  },
  "6": {
    "doc": "HW01  Version Control",
    "title": "Homework 1 Due Friday Feb 2nd at 4pm EST",
    "content": "In this homework, you will be practicing using version control (git and GitHub). We will be using this throughout the course extensively. Additionally, we will be requiring you to use the command line for this assignment. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw1#homework-1-due-friday-feb-2nd-at-4pm-est",
    "relUrl": "/assignments/hw1#homework-1-due-friday-feb-2nd-at-4pm-est"
  },
  "7": {
    "doc": "HW01  Version Control",
    "title": "Learning goals",
    "content": ". | Understand basic concepts of Version Control Systems (VCS) | Create Github Account | Performing basic VCS actions | Understand difference between git and GitHub | Practice VCS commands necessary for turning in homeworks | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw1#learning-goals",
    "relUrl": "/assignments/hw1#learning-goals"
  },
  "8": {
    "doc": "HW01  Version Control",
    "title": "Tasks",
    "content": "You will be asked to perform the following series of tasks: . | Create a GitHub account | Clone HW1 repo | Create a branch locally | Learn to manage conflicts | Push branch to github | Make a change to the student list | Open a Pull Request to the main branch | . Create a Github account . You should create a free GitHub account if you do not already have one. If you are creating a new GitHub account, you might want to consider using your andrewID, as that will make things easier for us. But you may use any account name you want. If you have an existing GitHub account, you may use that. Clone HW1 repo . There is a very simple repo that has been setup for HW1. You can find it here. You should clone the repo to a local directory on your machine. This should be done via the command line, and you should include the command(s) needed in your script to turn in. Create a branch locally . You should create a new branch of the repository, and you should name the branch with your andrewID as the name. This should be done via the command line, and you should include the command(s) needed in your script to turn in. Make a change to the student list, commit locally, and managing any conflicts that might exist . In the branch that you created, you should make a change to the ClassRoster.md file, adding your name and andrewID to the Class Roster. You should then commit that change to your local branch. Commiting should be done via the command line, and you should include the command(s) needed in your script to turn in. Push branch to github . Once you have committed your change, you should push the change on the branch to the GitHub repository. Please ensure you use a descriptive commit message! This should be done via the command line, and you should include the command(s) needed in your script to turn in. Open a Pull request to the main branch . Now that the commit is visible on the GitHub site, you should open a Pull Request from your personal branch, to the main branch. Again, don’t forget to have a descriptive message for the Pull Request. You do not need to do this via the command line, you may use the GitHub website for opening the pull request. Manage merge conflicts . Merge conflicts can be very annoying, and will be a cause of headaches for you. We want you to try and follow these steps to (artificially) create a merge conflict, so that you can merge the conflict. Here are the steps to follow: . | In the branch &lt; andrewID &gt;, create a text file called student_facts.txt | In this file, write what year and college you are in | Commit this change and include a message about what you just did | Create a new branch called &lt; new_andrewID &gt; and switch to that branch | Open up student_facts.txt and delete the previous line you wrote and now only include a sentence about a fun fact about yourself | Commit this change and include a message about what you just did | Switch back to the branch &lt; andrewID &gt; | Open up student_facts.txt and append to this file a sentence about what programming languages and/or coding classes you have taken | Commit this change and include a message about what you just did | While in &lt; andrewID &gt;, merge this branch with &lt; new_andrewID &gt; | You will see that there are conflicts | To resolve these conflicts, open on the file student_facts.txt and edit the file such that there are three different lines with (and in this order): . | A sentence about your year and major | A sentence about what programming languages and/or coding classes you have taken | A sentence with a fun fact about yourself | Commit this change and include a message about what you just did | . | While in &lt; andrewID &gt;, create a file with all of the Terminal commands you used so far The appropriate steps here should be done via the command line, and you should include the command(s) needed in your script to turn in. | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw1#tasks",
    "relUrl": "/assignments/hw1#tasks"
  },
  "9": {
    "doc": "HW01  Version Control",
    "title": "Resources",
    "content": ". | https://guides.github.com/ | https://guides.github.com/activities/hello-world/ | https://docs.github.com/en/desktop/installing-and-configuring-github-desktop/getting-started-with-github-desktop | https://gist.github.com/davfre/8313299 | https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw1#resources",
    "relUrl": "/assignments/hw1#resources"
  },
  "10": {
    "doc": "HW01  Version Control",
    "title": "Tips and Suggestions",
    "content": "We are requiring you to learn to use the command line interface for this assignment. While there are several git clients (SourceTree, Github Desktop) available, and if you find yourself struggling, you might want to try using a client first, then re-doing the assignment with the command line. Writing a good commit message is hard! Don’t feel bad if it takes a bit of thinking, or if you are not happy with your first version. One pro tip with git. It can often be the case that your local directory can get really messed up. Feel free to delete your local directly and start over. This is a common technique when working with git. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw1#tips-and-suggestions",
    "relUrl": "/assignments/hw1#tips-and-suggestions"
  },
  "11": {
    "doc": "HW01  Version Control",
    "title": "Deadlines and Deliverables",
    "content": "Due Date: Friday Feb 2nd at 4pm. You may use up to two (2) late days, out of six total. To use a late day, simply message us on slack to let us know that you will be using a late day. Deliverable: For this assignment, you have two deliverables. You will turn in a script that shows what commands you used at the command line. You should turn this in by sending it to both instructors and the TA in a group message via slack. Your commits to the repository will be viewable by us, and we will use them for grading (you might want to confirm that they are visible by using the GitHub web interface). ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw1#deadlines-and-deliverables",
    "relUrl": "/assignments/hw1#deadlines-and-deliverables"
  },
  "12": {
    "doc": "HW01  Version Control",
    "title": "Assignment Review",
    "content": "Because this is a new class, we are asking you to fill out a short survey to help us calibrate the homeworks. This survey is ungraded, but your input will be very valuable for us in improving the course both for this semester, and for future years. Fill out a short survey to help us improve the course! . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw1#assignment-review",
    "relUrl": "/assignments/hw1#assignment-review"
  },
  "13": {
    "doc": "HW01  Version Control",
    "title": "HW01  Version Control",
    "content": " ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw1",
    "relUrl": "/assignments/hw1"
  },
  "14": {
    "doc": "HW02  Reading Data",
    "title": "Homework 2 Due Tuesday Feb 9th at 4pm EST",
    "content": "In this homework you will practice writing a Python application, as well as reading data from various sources. Please read the entire assignment in full before you begin. You might find some helpful information in the Resources section. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw2#homework-2-due-tuesday-feb-9th-at-4pm-est",
    "relUrl": "/assignments/hw2#homework-2-due-tuesday-feb-9th-at-4pm-est"
  },
  "15": {
    "doc": "HW02  Reading Data",
    "title": "Learning goals",
    "content": ". | Run Python application | Read in data from a CSV file | Store data in the application | Calculate some basic statistics from data collected | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw2#learning-goals",
    "relUrl": "/assignments/hw2#learning-goals"
  },
  "16": {
    "doc": "HW02  Reading Data",
    "title": "Tasks",
    "content": "You will be asked to perform the following series of tasks: . | Clone the homework repo via GitHub Classroom. | Read csv file of weather forecast data | Print weather data | Calculate the average, minimum, and maximum of the temperature column in the data set | Read data directly from the US National Weather Service using their API | Show correctness by confirming the data on the website and calculating temperature again | . Clone Homework Repo via GitHub Classroom. Your first step for this project is to configure your repository that you will be working in for this assignment. You should create a repository via Github classroom at this link: https://classroom.github.com/a/N2lGzl0s. After accepting the homework, GitHub classroom will create a repo named crafting-software-hw-&lt;your-github-id&gt;. We will use this repo for future assignments, too. You will be committing your solutions to the hw2 folder in this repo for all this homework. Read .csv file of weather data . You should write a small program in Python that will read data from the weather.csv file. You can find the CSV file in your cloned repo, which include weather forecast data for Pittsburgh, PA on Jan 24, 2022. Then, you should write a small program to read each line of weather.csv into your program. You should push a commit to your repository with a descriptive commit message once you have reached this point. Print weather data . The next step is to simply print out the data using the print function in your application. Once you have achieved this, you should commit this change to your repository, and push it to your repo. Calculate the average, min, and max of the temperature column in the data set . The data in the .csv is documented by the first row in the dataset. You should calculate the average, max, and min of the temperature column in the file. To confirm these are the correct values, you should import the .csv file into a spreadsheet (Excel, Google Sheets, etc), and calculate the same values, and compare them. You should then commit this code. In the commit message and the hw2/README page, you should specify what the values were. Read data directly from the National Weather Service API . Another way to get the data from National Weather Service is to use their API (Application Programming Interface). You can find the API documented here: https://www.weather.gov/documentation/services-web-api. This time, you will get the most recent forecast data for Pittsburgh, PA. To get the data from the API, you will need to make a request. To make the API call, you should use the requests Python library: https://requests.readthedocs.io/en/master/. NOTE: installing requests might go smoothly, or it might be difficult. Please don’t hesitate to reach out, as there are lots of small things that could make this step go wrong. To confirm that you have retrieved the data, you should print it out. Then, you should commit and push this to your homework repository. Show correctness by calculating a value available on the website, to confirm correctness . To verify that you are using the data correctly, you can find the most recent forecast information on the National Weather Service website: https://www.weather.gov/forecastmaps. Just like the last time with weather.csv, you should calculate the min, max, and average of the temperature and compare it against the value on the site. Your commit message should show what the value is, and what confirm what your calculated value is. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw2#tasks",
    "relUrl": "/assignments/hw2#tasks"
  },
  "17": {
    "doc": "HW02  Reading Data",
    "title": "Resources",
    "content": "Some Resources that might be helpful: . Running Python code in virtual env: . | https://docs.python.org/3/tutorial/venv.html | . Reading a csv in Python: . | https://realpython.com/python-csv/ | https://stackoverflow.com/questions/11310248/find-number-of-columns-in-csv-file | https://docs.python-guide.org/starting/install3/osx/ | . Pip installing requests: . | https://requests.readthedocs.io/en/master/user/install/ | https://stackoverflow.com/questions/18363022/importerror-no-module-named-pip | . Using requests: . | https://realpython.com/python-requests/ | https://stackoverflow.com/questions/31126596/saving-response-from-requests-to-file | https://learning.postman.com/docs/sending-requests/requests/#creating-requests | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw2#resources",
    "relUrl": "/assignments/hw2#resources"
  },
  "18": {
    "doc": "HW02  Reading Data",
    "title": "Tips and Suggestions",
    "content": ". | If you copy code from the internet, add a comment to attribute it. | The National Weather Service API doesn’t accept locations like Pittsburgh, PA as an input. To find out what format it requires, read their FAQ page. | There are many tools online (e.g. Google Maps) that converts from city names to coordinates. | . | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw2#tips-and-suggestions",
    "relUrl": "/assignments/hw2#tips-and-suggestions"
  },
  "19": {
    "doc": "HW02  Reading Data",
    "title": "Deadlines and Deliverables",
    "content": "Due Date: Tuesday Feb 9th at 4pm. You may use up to two (2) late days, out of six total. To use a late day, simply message us on slack to let us know that you will be using a late day. Deliverable: For this assignment, you have one deliverable. You should commit the code you have written to your repository as you go along. Your hw2/README.md file should also contain description of what’s in the repo and the results of data analysis in this homework. When you are ready to submit, you should create a new tag, your tag should be 2.0 (for HW2). (https://git-scm.com/book/en/v2/Git-Basics-Tagging) then send a group message to the instructors and TA via Slack. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw2#deadlines-and-deliverables",
    "relUrl": "/assignments/hw2#deadlines-and-deliverables"
  },
  "20": {
    "doc": "HW02  Reading Data",
    "title": "Assignment Review",
    "content": "Because this is a new class, we are asking you to fill out a short survey to help us calibrate the homeworks. This survey is ungraded, but your input will be very valuable for us in improving the course both for this semester, and for future years. Fill out a short survey to help us improve the course! . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw2#assignment-review",
    "relUrl": "/assignments/hw2#assignment-review"
  },
  "21": {
    "doc": "HW02  Reading Data",
    "title": "HW02  Reading Data",
    "content": " ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw2",
    "relUrl": "/assignments/hw2"
  },
  "22": {
    "doc": "HW03 Defensive Programming",
    "title": "Homework 3",
    "content": "Due Friday Feb 17th at 4:00pm EST . In this homework, you will practice writing a Python application, dealing with uncleaned data, handling potential errors, and using assert statements. Please read the entire assignment in full before you begin. You might find some helpful information in the Resources section. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw3#homework-3",
    "relUrl": "/assignments/hw3#homework-3"
  },
  "23": {
    "doc": "HW03 Defensive Programming",
    "title": "Learning goals",
    "content": ". | Identify problems in data programmatically (instead of doing it manually) | Write code to handle errors | Write asserts to catch future errors | Applying previous skills: git/GitHub and reading files | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw3#learning-goals",
    "relUrl": "/assignments/hw3#learning-goals"
  },
  "24": {
    "doc": "HW03 Defensive Programming",
    "title": "Tasks",
    "content": "Perform the following tasks: . | Create a hw3 folder in your homework monorepo | Download the input CSV file (link provided below) | Create a Python script with some starter code for reading and writing files | Find one issue in the uncleaned .csv file | Find the rest of the issues in the uncleaned .csv file | Mitigate issues computationally | . Create a hw3 folder in your homework monorepo . In your crafting-software-hw-&lt;username&gt; directory (the same repo you used for the last homework), create an empty directory called hw3. Please also include a README.md file in hw3 with the following information: . | The title of the homework (# Homework 3) | Your name and Andrew ID | . A .md file is written in the Markdown syntax. Refer to this quick reference to learn more about how to format your README file and any conversations on GitHub. Note: You can preview a Markdown file in VS Code by control/right-clicking its tab and clicking Preview. Download the input CSV file . We provided a CSV file with some errors. Download the file (input.csv) here: https://gist.githubusercontent.com/wodeni/c3460ead276a2ea87ad7f7fcc0dda246/raw/a790d28f66971ed1c70f43eb475907018705a7d1/input.csv . Please put the file in hw3. Throughout this homework, you will identify the problems in this file and fix them computationally in a Python program. Write some starter code for reading and writing files . Create a Python file called cleanCSV.py in the hw3 directory. For this step, you only need to implement the following funcionalities: . | Read the input csv file (input.csv) | Write an output csv file (output.csv) | When you run cleanCSV.py the first time, the output file should be exactly the same as the input file. | . Identify problems in the uncleaned CSV file . You should identify the problem we have injected into the uncleaned CSV file. We have added two examples of nine types of problems to the file (a total of 18 problems). You should identify them all. Since the file is large, you will be most effective in finding the problems if you search for them programmatically. You might also want to write asserts to help identify problems. To assist you, here is a full list of problems in input.csv, with a short description of each type of problem. There are 2 instances of each of the problems below: . | Full state name | Invalid state code | Extra comma | Date out of range | Decimal instead of an Integer | Add letter added to an Integer | NumString in the place of an Integer | CharString in an Integer | Missing newline | . You should paste this list into your README.md and add your findings as you work through this homework. Once you find an instance of a problem type, you should write the input file line numbers where the instance occured under the appropriate category in README.md. Mitigate issues computationally . Modify cleanCSV.py so it outputs a cleaned csv. You should not repair input.csv by hand. Your program should output as much of the original data as possible, but repair the problems you identified in one of the ways we discussed in class: . | Replace garbled data with default values | Use an average of other values in the column | Remove extraneous content | Add missing content | Perform a bespoke/one-off correction. If the input data is irredeemable it is also okay to remove the line. | . For each of the problems you identified above, write a very short (e.g. one sentence) justification of the fix to your program. These justifications should explain why the fix you wrote was appropriate for the problem. Write these justifications immediately after each problem in README.md. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw3#tasks",
    "relUrl": "/assignments/hw3#tasks"
  },
  "25": {
    "doc": "HW03 Defensive Programming",
    "title": "Resources",
    "content": ". | https://www.w3schools.com/python/ref_keyword_assert.asp | https://www.w3schools.com/python/ref_func_isinstance.asp | https://www.askpython.com/python/examples/add-a-newline-character-in-python | https://docs.python.org/3/library/datetime.html | https://www.w3schools.com/python/python_casting.asp | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw3#resources",
    "relUrl": "/assignments/hw3#resources"
  },
  "26": {
    "doc": "HW03 Defensive Programming",
    "title": "Tips and Suggestions",
    "content": ". | You might want to combine automated analysis with manual inspection of the input file. | Add assert statements to check for correct types (ie what type should state be?) | Use print statements | The len() function can check the length of a string (e.g. len(“cat”) == 3) | The isinstance() function can check the type of an input (e.g. assert isinstance(5, int)) | You can change the type of variables (e.g. int(“4”) becomes 4) | As much as possible, try to avoid hard-coding to catch only the errors in the file we give you. Your code should be able to catch similar errors on other sets of data. For example, do not just say: if row # = 42, don’t include in new CSV. We want you to use logic, so your code can be applied to any different CSV files and catch the incorrect data. | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw3#tips-and-suggestions",
    "relUrl": "/assignments/hw3#tips-and-suggestions"
  },
  "27": {
    "doc": "HW03 Defensive Programming",
    "title": "Deadlines and Deliverables",
    "content": "Due Date: . | Friday Feb 17th at 4:00pm. | . You may use up to two (2) late days for each part. To use a late day, simply message us on Slack to let us know that you will be using a late day. Deliverable: For this assignment, the files that should be included in your repository (in the subdirectory hw3) should be: . | README.md | cleanCSV.py | input.csv | output.csv | . When you are ready to submit, create a new tag called 3.0 (for HW3 final version). Here’s a quick guide to git tag: https://git-scm.com/book/en/v2/Git-Basics-Tagging. All deliverables should be committed and pushed to the main branch of your repository on GitHub. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw3#deadlines-and-deliverables",
    "relUrl": "/assignments/hw3#deadlines-and-deliverables"
  },
  "28": {
    "doc": "HW03 Defensive Programming",
    "title": "HW03 Defensive Programming",
    "content": " ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw3",
    "relUrl": "/assignments/hw3"
  },
  "29": {
    "doc": "HW04 Pandas",
    "title": "Homework 4",
    "content": "Due Wednesday Feb 28th at 4:00pm EST . In this homework, you will be working with Pandas in a Juypter notebook. Please read the entire assignment in full before you begin. You might find some helpful information in the Resources section. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw4#homework-4",
    "relUrl": "/assignments/hw4#homework-4"
  },
  "30": {
    "doc": "HW04 Pandas",
    "title": "Learning goals",
    "content": ". | Import data into a notebook | Answer questions by analyzing the dataframe | Join two dataframes | Follow best practices for notebook use | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw4#learning-goals",
    "relUrl": "/assignments/hw4#learning-goals"
  },
  "31": {
    "doc": "HW04 Pandas",
    "title": "Tasks",
    "content": "For this assignment, you will be doing Pandas tasks, and you will share your solution in a Jupyter notebook. You will be asked to perform the following series of tasks, all in Jupyter notebook: . | Import data into dataframes from a CSV file (COVID vaccine and case data) and via a REST API (census data). | Add a column to the vaccination data that indicates what day of the week each day represents | Find the average number of increase in cases by day of the week (i.e., the avg number of cases increase on mondays, tuesdays, etc) | Join dataframes | Add a new column to the dataframe that is the per capita hospitalized number (hospitalizedCurrently/ total number of residents). | Avoid hidden state errors | . Import data into dataframes . You should import the COVID data from this CSV file: . https://gist.githubusercontent.com/wodeni/2d838d8241b229b63aa2a4f1a044e994/raw/12b1bcf27d06ed9c864f03933333f76918781c3f/state.timeseries.csv . Use the query from Recitation-2 and the requests library to request the census data and load it into a dataframe: . https://api.census.gov/data/2019/pep/charagegroups?get=NAME,POP&amp;for=state:* . You should import each dataset into a dataframe each, and you will use these dataframes for the rest of the homework. Add a column to the vaccine data that indicates what day of the week each day represents . You should add a new column to the vaccine dataframe that represents the day of the week. You can use strings or numbers to represent the day of the week. (It’s okay if you want to do both a number and a string). Find the average number of case increase by day of the week . Using pandas, you should calculate (and print) the average number of increased cases by day of the week. NOTE: you might want to plot this data. We will talk about visualizations in depth later on, but for now, you may plot the data if you want, but you are not required to. Join dataframes . Join both dataframes, the vaccine and the census data. You should join them on states, as we have done previously. You should also create new dataframe that you can use for the following question. Add a new column to the dataframe that is the per capita vaccination number . Add a new column to the combined dataframe that is per capita vaccination (vaccination / total number of residents) for each state. Avoid hidden state errors . Throughout this homework, you should follow best practices as we described in lecture. Specifically, you should avoid relying on hidden state. This means that you should be able to run your cells in any order, and get the same results. You should not have any 2 cells that write to the same object in shared state, but you may read the same object several times. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw4#tasks",
    "relUrl": "/assignments/hw4#tasks"
  },
  "32": {
    "doc": "HW04 Pandas",
    "title": "Bonus Challenge:",
    "content": "Calculate a statistical test to see if there is a statistical difference between weekend vs weekday cases. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw4#bonus-challenge",
    "relUrl": "/assignments/hw4#bonus-challenge"
  },
  "33": {
    "doc": "HW04 Pandas",
    "title": "Resources",
    "content": ". | https://pandas.pydata.org/docs/user_guide/merging.html | https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_index.html | https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html | https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw4#resources",
    "relUrl": "/assignments/hw4#resources"
  },
  "34": {
    "doc": "HW04 Pandas",
    "title": "Tips and Suggestions",
    "content": "To calculate the day of the week, consider reading the datetime documentation: https://docs.python.org/3/library/datetime.html To calculate information by day of the week, considering which information to make the index of the DataFrame and the various index operations available . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw4#tips-and-suggestions",
    "relUrl": "/assignments/hw4#tips-and-suggestions"
  },
  "35": {
    "doc": "HW04 Pandas",
    "title": "Deadlines and Deliverables",
    "content": "Due Date: Wednesday Feb 28th at 4:00pm EST . The deliverable should be committed and pushed to the main branch of your repository on GitHub. Your notebook file (i.e.ipynb) file should be committed and pushed to your homework repository in a hw4 subdirectory. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw4#deadlines-and-deliverables",
    "relUrl": "/assignments/hw4#deadlines-and-deliverables"
  },
  "36": {
    "doc": "HW04 Pandas",
    "title": "HW04 Pandas",
    "content": " ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw4",
    "relUrl": "/assignments/hw4"
  },
  "37": {
    "doc": "HW05 Hypothesis",
    "title": "Homework 5",
    "content": "Due Friday Mar 15th at 4:00pm EST . In this homework, you will use Hypothesis, a property-based testing tool, to find an obscure-ish bug in Wordle. Please read the entire assignment in full before you begin. You might find some helpful information in the Resources section. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw5#homework-5",
    "relUrl": "/assignments/hw5#homework-5"
  },
  "38": {
    "doc": "HW05 Hypothesis",
    "title": "Learning goals",
    "content": ". | Think of a property that should always hold for function is_yellow. | Describe the property in your own words | Use Hypothesis to implement your property test for is_yellow | Find an obscure Wordle bug using Hypothesis | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw5#learning-goals",
    "relUrl": "/assignments/hw5#learning-goals"
  },
  "39": {
    "doc": "HW05 Hypothesis",
    "title": "Tasks",
    "content": "For this assignment, you will test a buggy version of Wordle using Hypothesis and try to find a bug. You will perform the following tasks. You can use Codespaces for this assignment. | Install Hypothesis | Setup your hw5 folder | Define your is_yellow property in your own words | Implement your property in wordle_parts_test.py | Find the bug using Hypothesis | Bonus Challenge: Fix the bug! | . Install Hypothesis . Using the terminal in your homework repo: . pip install hypothesis . Setup your hw5 folder . | In your homework repo: mkdir hw5 cd hw5 . | Dowload the following files into hw5: . | Buggy Wordle: wordle_parts_buggy.py https://gist.githubusercontent.com/cmumatt/d8973817349b243a88b034c654c7fda9/raw/c4ecd84b4c2c6119ea70ef13e70c69b595361093/wordle_parts_buggy.py | Starter test code: wordle_parts_test.py https://gist.githubusercontent.com/cmumatt/75fbf9d12b703a2021666db38adc3123/raw/912127dad10aca9796f00110173a227ff04dfc2f/wordle_parts_test.py | . | Create a blank README.md in hw5 | Stage, commit, and push to the remote repository | . Define your is_yellow property in your own words . Think about the cases when is_yellow should return true and when it should return false. Without re-implementing is_yellow can you think of some ways to predict when is_yellow might return true and when it might return false? . This may take some time and creativity. Write the property you choose in your own words in README.md. Implement your property in wordle_parts_test.py . Write a short test in function test_is_yellow_pbt that you think might find the bug. Note: Short here means under 10 lines of code; if writing more than that you may want to consider a simpler property. Find the bug using Hypothesis . To execute Hypothesis, run pytest in terminal with hw5 as your current working directory. If all tests pass, Hypothesis will say the tests passed (meaning it didn’t find the bug). If a test fails, Hypothesis will show you a single example as well as the assertion that failed. The documentation (see Resources) also explains this. When you find the bug, update README.md with: . | The counter-example Hypothesis found | Describe your experience trying to find the bug. Do you think this might be harder or easier than manually thinking of test cases? | Is there anything that you liked or disliked about using Hypothesis? How do you think it could be better or easier to use? | . Note: If your property didn’t find a bug, you should consider other properties to test. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw5#tasks",
    "relUrl": "/assignments/hw5#tasks"
  },
  "40": {
    "doc": "HW05 Hypothesis",
    "title": "Bonus Challenge: Fix the Bug!",
    "content": "Correct the bug: include a corrected version of Wordle in your repo named wordle_parts_fixed.py . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw5#bonus-challenge-fix-the-bug",
    "relUrl": "/assignments/hw5#bonus-challenge-fix-the-bug"
  },
  "41": {
    "doc": "HW05 Hypothesis",
    "title": "Resources",
    "content": ". | Hypothesis Documentation: https://hypothesis.readthedocs.io/ | Hypothesis Quick Start Guide: https://hypothesis.readthedocs.io/en/latest/quickstart.html | Getting Started With Property-Based Testing in Python: https://semaphoreci.com/blog/property-based-testing-python-hypothesis-pytest | Testing your Python Code with Hypothesis: https://www.inspiredpython.com/course/testing-with-hypothesis/testing-your-python-code-with-hypothesis | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw5#resources",
    "relUrl": "/assignments/hw5#resources"
  },
  "42": {
    "doc": "HW05 Hypothesis",
    "title": "Tips and Suggestions",
    "content": "You can assume that is_green and is_red are correctly implemented. If you get completely stuck, consider whether any position may ever be anything other than red, green, or yellow. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw5#tips-and-suggestions",
    "relUrl": "/assignments/hw5#tips-and-suggestions"
  },
  "43": {
    "doc": "HW05 Hypothesis",
    "title": "Deadlines and Deliverables",
    "content": "Due Date: Friday March 15th at 4:00pm EST . The deliverable should be committed and pushed to the main branch of your repository on GitHub inside a hw5 subdirectory. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw5#deadlines-and-deliverables",
    "relUrl": "/assignments/hw5#deadlines-and-deliverables"
  },
  "44": {
    "doc": "HW05 Hypothesis",
    "title": "HW05 Hypothesis",
    "content": " ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw5",
    "relUrl": "/assignments/hw5"
  },
  "45": {
    "doc": "HW06 Visualization",
    "title": "Homework 6",
    "content": "Due Monday Mar 25th at 3:50pm EST . In this homework, you will be working with Altair in a Juypter notebook. Please read the entire assignment in full before you begin. You might find some helpful information in the Resources section. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw6#homework-6",
    "relUrl": "/assignments/hw6#homework-6"
  },
  "46": {
    "doc": "HW06 Visualization",
    "title": "Learning goals",
    "content": ". | Understand Altair, Data Types, Graphical Marks, and Visual Encoding Channels | Make informative graphs using data visualizations we discussed | Interact and transform the data | Iterate over graphs and select features that best show the data | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw6#learning-goals",
    "relUrl": "/assignments/hw6#learning-goals"
  },
  "47": {
    "doc": "HW06 Visualization",
    "title": "Tasks",
    "content": "For this assignment, you will be doing Altair tasks, and you will share your solution in a Jupyter notebook. You will be asked to perform the following series of tasks, all in jupyter notebook: . | Import the same data you used for HW4 (COVID and census. You may copy and paste that code). | In a cell, write a comment that gives an example of Nominal, Ordinal, Quantitative, and Temporal data using the columns in the COVID dataset. | Start by creating a default graph where you visualize the relationships between two columns in the data using a default graph (using mark_point). | Modify the previous mark_point graph and use visualization elements and arguments to make the graphs easier for users to read and understand. | Using the previous two columns, make three new visualizations, choosing from mark_area(), mark_bar(), mark_circle(), mark_line(), mark_rect(), mark_rule(), mark_square(), mark_text(), mark_tick(). For each one, describe a pro and con to using this graph to visualize the data. For each one, also write a comment of what this type of graph allowed you to observe about the data. | Make another visualization, choosing from mark_area(), mark_bar(), mark_circle(), mark_line(), mark_rect(), mark_rule(), mark_square(), mark_text(), mark_tick(), where you transform the data (such as bins, averages, etc). Write a comment of what you observe about the data. | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw6#tasks",
    "relUrl": "/assignments/hw6#tasks"
  },
  "48": {
    "doc": "HW06 Visualization",
    "title": "Bonus Challenge:",
    "content": "Find an example visualization from the Altair Example Gallery (https://altair-viz.github.io/gallery/), and copy the code into your own notebook, and get it to work with your data source (the COVID dataset). ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw6#bonus-challenge",
    "relUrl": "/assignments/hw6#bonus-challenge"
  },
  "49": {
    "doc": "HW06 Visualization",
    "title": "Resources",
    "content": "https://uwdata.github.io/visualization-curriculum/altair_introduction.html . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw6#resources",
    "relUrl": "/assignments/hw6#resources"
  },
  "50": {
    "doc": "HW06 Visualization",
    "title": "Tips and Suggestions",
    "content": "When making your graphs, do not try to do everything at once. First make sure the data is showing on the graphs, then start adding other elements/parameters. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw6#tips-and-suggestions",
    "relUrl": "/assignments/hw6#tips-and-suggestions"
  },
  "51": {
    "doc": "HW06 Visualization",
    "title": "Deadlines and Deliverables",
    "content": "The deliverable should be committed and pushed to the main branch of your repository on GitHub. It is due Monday, March 25th. Your notebook file (i.e.ipynb) file should be committed and pushed to your homework repository in a hw6 subdirectory. ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw6#deadlines-and-deliverables",
    "relUrl": "/assignments/hw6#deadlines-and-deliverables"
  },
  "52": {
    "doc": "HW06 Visualization",
    "title": "HW06 Visualization",
    "content": " ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/hw6",
    "relUrl": "/assignments/hw6"
  },
  "53": {
    "doc": "Software Crafting",
    "title": "17-950 Crafting Software",
    "content": "Welcome to Crafting Software . See previous class instances here: 2022, 2021 . Do you use programming to solve problems in your field of study? Do you know enough to be dangerous, but wish you could be proud of your code? This course aims to provide students with sufficient knowledge and skills to use programming as part of their work. In this class, you will learn how to identify and find problems in your code. You will learn to read, parse, organize, and transform data. We will teach you to write code collaboratively and refine your programs so others can use them.The course will be a mixture of lecture and guided exercise with a recitation focused on hands on instruction. In this course, students are expected to have been exposed to some basic programming concepts, such as variables, if-statements, loops, and arrays. However, students are not expected to have extensive programming experience. This course is not appropriate for students that have completed more than two courses involving programming. We expect students in this class to have diverse backgrounds and experience. Some students will be self-taught, while others will have taken a programming course such as 02-201, 15-110, 95-898, or the library’s Software Carpentry workshop. Learning Goals . | Identify the common resources available for developing software and evaluate the quality of the content. | Understand important rules and conventions of software systems. | Understand and apply common languages and tools used to develop real-world software. | Apply collaborative work strategies when developing software. | Analyze alternative software tools and select appropriate choices for the problem. | Analyze software to diagnose problems and create solutions. | Create and deploy a web application that reads, parses, and analyzes data. | . Structure of the course . Meets twice weekly Most classes will include both a lecture and a collaborative in-class exercise There will be weekly homework assignments for students to practice that week’s material There will be a summative final project, in which students will integrate the tools and techniques they have learned into a cohesive whole. Evaluation in the course will be approximately as follows: . | Homeworks: 50% | Quizzes: 10% | Final project: 30% | Participation: 10% | . ",
    "url": "https://cmu-crafting-software.github.io/2024//#17-950-crafting-software",
    "relUrl": "/#17-950-crafting-software"
  },
  "54": {
    "doc": "Software Crafting",
    "title": "Software Crafting",
    "content": " ",
    "url": "https://cmu-crafting-software.github.io/2024//",
    "relUrl": "/"
  },
  "55": {
    "doc": "Final Project Proposal",
    "title": "Final Project Proposal",
    "content": "Due Friday Mar 1st at 4pm EST . The goal for the final project is for you to make use of the skills you’ve learned in the course in an independent, open-ended context. The project should be a stand-alone application that interacts with data and shareable with a wider community. An ideal final project will be related to your research or main course of study. Ideally you will work with one partner, but it is also acceptable to work alone. Everyone should write a project proposal, but there will be a matchmaking phase later where you can join another project or merge your project with another student’s project. Defining and implementing the project will be an iterative process which will include many rounds of feedback and conversation with the course staff. The goal of the proposal is to start those conversations. Project templates . We are flexible about the project you propose, as long as it makes use of the skills you have learned in the class. You may find it helpful to consider one of the following project templates to help you develop your proposal: . | Start a new data analysis project for your research and develop it to the point that it is shareable. One good output could be a companion website for a research paper. | Take a coding project you’ve completed and turn it into a shareable application that others can use on similar data. | Develop a support utility for your lab, research group, or department. | . Deadlines and deliverables . Due Date: Friday Mar 1st at 4pm EST . Deliverable: Your proposal should include a short project title and 2-3 paragraphs describing the purpose and scope of the project. Your writeup should address the following questions: . | What is the audience for your project? Who might use it if you succeed? For what purpose? | What are the set of features in your minimum-viable product? | What other features will you include? | How will you implement each feature? Which technologies will you use? | . In your homework repository, create a folder called proposal and a README file (proposal/README.md). You can also submit files in other formats (e.g. audio/video, PDFs, Google Docs). Just be sure to describe the files and include the links in your README. Similar to past homework assignments, be sure to include the following in your README: . | Your name and Andrew ID | The name of your project and team members (if applicable) | Project description | Links to files/description of other files in the repo (if applicable) | . ",
    "url": "https://cmu-crafting-software.github.io/2024//assignments/proposal",
    "relUrl": "/assignments/proposal"
  },
  "56": {
    "doc": "Resources",
    "title": "Resources",
    "content": " ",
    "url": "https://cmu-crafting-software.github.io/2024//resources/",
    "relUrl": "/resources/"
  },
  "57": {
    "doc": "Resources",
    "title": "git and GitHub",
    "content": "github cheatsheet . git tower cheatsheet . How to cite files . Learning Git . Learning Vim adventure game . python cheat sheet . ",
    "url": "https://cmu-crafting-software.github.io/2024//resources/#git-and-github",
    "relUrl": "/resources/#git-and-github"
  },
  "58": {
    "doc": "Staff",
    "title": "Staff",
    "content": " ",
    "url": "https://cmu-crafting-software.github.io/2024//staff/",
    "relUrl": "/staff/"
  },
  "59": {
    "doc": "Staff",
    "title": "Instructors",
    "content": "Josh Sunshine . sunshine@cs.cmu.edu . Michael Hilton . mhilton@cmu.edu . Schedule an appointment . ",
    "url": "https://cmu-crafting-software.github.io/2024//staff/#instructors",
    "relUrl": "/staff/#instructors"
  },
  "60": {
    "doc": "Staff",
    "title": "Teaching Assistants",
    "content": "Matt Davis . mcd2@cs.cmu.edu . ",
    "url": "https://cmu-crafting-software.github.io/2024//staff/#teaching-assistants",
    "relUrl": "/staff/#teaching-assistants"
  },
  "61": {
    "doc": "Syllabus",
    "title": "Syllabus",
    "content": " ",
    "url": "https://cmu-crafting-software.github.io/2024//syllabus/",
    "relUrl": "/syllabus/"
  },
  "62": {
    "doc": "Syllabus",
    "title": "Learning goals",
    "content": "Identify the common resources available for developing software and evaluate the quality of the content. Understand important rules and conventions of software systems. Understand and apply common languages and tools used to develop real-world software. Apply collaborative work strategies when developing software. Analyze alternative software tools and select appropriate choices for the problem. Analyze software to diagnose problems and create solutions. Create and deploy a web application that reads, parses, and analyzes data. ",
    "url": "https://cmu-crafting-software.github.io/2024//syllabus/#learning-goals",
    "relUrl": "/syllabus/#learning-goals"
  },
  "63": {
    "doc": "Syllabus",
    "title": "Structure of the course",
    "content": "Most classes will include both a lecture and a collaborative in-class exercise There will be weekly homework assignments for students to practice that week’s material There will be a summative final project, in which students will integrate the tools and techniques they have learned into a cohesive whole. ",
    "url": "https://cmu-crafting-software.github.io/2024//syllabus/#structure-of-the-course",
    "relUrl": "/syllabus/#structure-of-the-course"
  },
  "64": {
    "doc": "Syllabus",
    "title": "Evaluation in the course will be approximately as follows:",
    "content": ". | Homeworks: 50% | Quizzes: 10% | Final project: 30% | Participation: 10% | . ",
    "url": "https://cmu-crafting-software.github.io/2024//syllabus/#evaluation-in-the-course-will-be-approximately-as-follows",
    "relUrl": "/syllabus/#evaluation-in-the-course-will-be-approximately-as-follows"
  },
  "65": {
    "doc": "Syllabus",
    "title": "Late days",
    "content": "For the homeworks, you will have a total of six (6) late days. You may use up to two (2) late days per assignment. To use a late day, you need to to message the course staff in a private message on slack, informing us that you will be using a late day. ",
    "url": "https://cmu-crafting-software.github.io/2024//syllabus/#late-days",
    "relUrl": "/syllabus/#late-days"
  },
  "66": {
    "doc": "Syllabus",
    "title": "Logistics and People",
    "content": ". | Main class: Monday, Wednesday 3:30PM-4:50PM (WEH 4707) | Recitation: Friday 4:00PM-4:50PM (WEH 4707) | . ",
    "url": "https://cmu-crafting-software.github.io/2024//syllabus/#logistics-and-people",
    "relUrl": "/syllabus/#logistics-and-people"
  },
  "67": {
    "doc": "Syllabus",
    "title": "Instructors:",
    "content": ". | Michael Hilton (mhilton@cmu.edu) | Josh Sunshine (sunshine@cs.cmu.edu) | . ",
    "url": "https://cmu-crafting-software.github.io/2024//syllabus/#instructors",
    "relUrl": "/syllabus/#instructors"
  },
  "68": {
    "doc": "Syllabus",
    "title": "Research in the course.",
    "content": "For this class, we are conducting research on teaching and learning. This research will involve some student work. You will not be asked to do anything above and beyond the normal learning activities and assignments that are part of this course. You are free not to participate in this research, and your participation will have no influence on your grade for this course or your academic career at CMU. If you do not wish to participate, please send an email to Chad Hershock (hershock@andrew.cmu.edu). Participants will not receive any compensation. The data collected as part of this research will include student grades. All analyses of data from participants’ coursework will be conducted after the course is over and final grades are submitted. The Eberly Center may provide support on this research project regarding data analysis and interpretation. The Eberly Center for Teaching Excellence &amp; Educational Innovation is located on the CMU-Pittsburgh Campus and its mission is to support the professional development of all CMU instructors regarding teaching and learning. To minimize the risk of breach of confidentiality, the Eberly Center will never have access to data from this course containing your personal identifiers. All data will be analyzed in de-identified form and presented in the aggregate, without any personal identifiers. If you have questions pertaining to your rights as a research participant, or to report concerns to this study, please contact Chad Hershock (hershock@andrew.cmu.edu). ",
    "url": "https://cmu-crafting-software.github.io/2024//syllabus/#research-in-the-course",
    "relUrl": "/syllabus/#research-in-the-course"
  },
  "69": {
    "doc": "Syllabus",
    "title": "Professionalism.",
    "content": "Your classmates are your colleagues. This is particularly true in this course, where we aim to provide you with principles, practices, tools, and paradigms that will enable you to be an effective, real-world Software Engineer. We ask that you treat one another like the professionals you are and that you are preparing to be. To that end, we will not tolerate harassment in this class. We define harassment as unwelcome or hostile behavior of an ad hominem nature, i.e., that focuses not on ideas but on people and identity. This includes offensive verbal or written comments in reference to gender, sexual orientation, disability, physical appearance, race, or religion; sexual images in public spaces; deliberate intimidation, stalking, following, harassing photography or recording, sustained disruption of class meetings, inappropriate physical contact, and unwelcome sexual attention. Harassment is against the law and we have no tolerance for it, and neither does the university. Even when behavior does not rise to the level of harassment (even if you think you’re “just joking!”), it can still make people very uncomfortable, and harm their educational and professional career by forcing them to devote mental energy to something other than the material they are trying to learn or the professional successes they are trying to achieve. However, we expect that we do not need to threaten you to earn your respect on this matter: we simply ask that you treat one another like professionals, in the most positive sense. This has two implications: If you feel someone is violating these principles (for example, with a joke that could be interpreted as sexist, racist, or exclusionary), and you feel you have the standing to do so, speak up! Do not be a bystander to unprofessional behavior. If you do not feel comfortable doing so, and/or if the behavior persists, send a private email to the course instructors or set up a meeting with us to discuss the matter. We will preserve your anonymity. We, the course staff, are committed to affording you the same respect we ask you to afford one another. If you feel that we are not doing so, we hope you will feel comfortable either telling us so directly, or approaching another one of the course staff with your concerns. (Thank you to Shriram Krishnamurthi and Evan Peck for sharing their own policies, from which we drew inspiration for this one.) . ",
    "url": "https://cmu-crafting-software.github.io/2024//syllabus/#professionalism",
    "relUrl": "/syllabus/#professionalism"
  },
  "70": {
    "doc": "Syllabus",
    "title": "Academic honesty and collaboration.",
    "content": "The usual policies apply, especially the University Policy on Academic Integrity. Many of the assignments will be done in groups. We expect that group members collaborate with one another, but that groups work independently from one another, not exchanging results with other groups. Within groups, we expect that you are honest about your contribution to the group’s work. This implies not taking credit for others’ work and not covering for team members that have not contributed to the team. Otherwise, our expectations regarding academic honestly and collaboration for group work are the same as for individual work, substituting elevated to the level of “group.” The course includes both individual assignments and individual components of group assignments. Although your solutions for individual parts will be based on the content produced for the group component (e.g., written reflections on lessons learned), we treat individual components of group assignments as equivalent to individual assignments overall, and expect you to complete such components independently of your groupmates. You may not copy any part of a solution to a problem that was written by another student, or was developed together with another student, or was copied from another unauthorized source such as the Internet. You may not look at another student’s solution, even if you have completed your own, nor may you knowingly give your solution to another student or leave your solution where another student can see it. Here are some examples of behavior that are inappropriate: Copying or retyping, or referring to, files or parts of files (such as source code, written text, or unit tests) from another person or source (whether in final or draft form, regardless of the permissions set on the associated files) while producing your own. This is true even if your version includes minor modifications such as style or variable name changes or minor logic modifications. Getting help that you do not fully understand, and from someone whom you do not acknowledge on your solution. Writing, using, or submitting a program that attempts to alter or erase grading information or otherwise compromise security of course resources. Lying to course staff. Giving copies of work to others, or allowing someone else to copy or refer to your code or written assignment to produce their own, either in draft or final form. This includes making your work publicly available in a way that other students (current or future) can access your solutions, even if others’ access is accidental or incidental to your goals. Beware the privacy settings on your open source accounts! Coaching others step-by-step without them understanding your help. If any of your work contains any statement that was not written by you, you must put it in quotes and cite the source. If you are paraphrasing an idea you read elsewhere, you must acknowledge the source. Using existing material without proper citation is plagiarism, a form of cheating. If there is any question about whether the material is permitted, you must get permission in advance. It is not considered cheating to clarify vague points in the assignments, lectures, lecture notes; to give help or receive help in using the computer systems, compilers, debuggers, profilers, or other facilities; or to discuss ideas at a very high level, without referring to or producing code. Any violation of this policy is cheating. The minimum penalty for cheating (including plagiarism) will be a zero grade for the whole assignment. Cheating incidents will also be reported through University channels, with possible additional disciplinary action (see the above-linked University Policy on Academic Integrity). If you have any question about how this policy applies in a particular situation, ask the instructors for clarification. Note that the instructors respect honesty in these (and indeed most!) situations. ",
    "url": "https://cmu-crafting-software.github.io/2024//syllabus/#academic-honesty-and-collaboration",
    "relUrl": "/syllabus/#academic-honesty-and-collaboration"
  },
  "71": {
    "doc": "Syllabus",
    "title": "Accommodations.",
    "content": "If you wish to request an accommodation due to a documented disability, please inform the instructor as soon as possible and contact Disability Resources at 412.268.2013 or access@andrew.cmu.edu. ",
    "url": "https://cmu-crafting-software.github.io/2024//syllabus/#accommodations",
    "relUrl": "/syllabus/#accommodations"
  },
  "72": {
    "doc": "Syllabus",
    "title": "A note on self care.",
    "content": "Please take care of yourself. Do your best to maintain a healthy lifestyle this semester by eating well, exercising, avoiding drugs and alcohol, getting enough sleep and taking some time to relax. This will help you achieve your goals and cope with stress. All of us benefit from support during times of struggle. You are not alone. There are many helpful resources available on campus and an important part of the college experience is learning how to ask for help. Asking for support sooner rather than later is often helpful. If you or anyone you know experiences any academic stress, difficult life events, or feelings like anxiety or depression, we strongly encourage you to seek support. Counseling and Psychological Services (CaPS) is here to help: call 412-268-2922 and visit their website at http://www.cmu.edu/counseling/. Consider reaching out to a friend, faculty or family member you trust for help getting connected to the support that can help. ",
    "url": "https://cmu-crafting-software.github.io/2024//syllabus/#a-note-on-self-care",
    "relUrl": "/syllabus/#a-note-on-self-care"
  }
}
